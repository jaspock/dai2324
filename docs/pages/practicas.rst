
Enunciados de las pr√°cticas
===========================

Calendario
----------

Este es el calendario de cada uno de los entregables de la asignatura. No se admitir√°n entregas fuera de plazo.

.. list-table::
    :widths: 15 40 15 15 15
    :header-rows: 1
    :class: tablita

    * - Entregable
      - T√≠tulo
      - Fecha l√≠mite de entrega
      - Tiempo medio estimado de realizaci√≥n
      - Porcentaje en la nota de pr√°cticas
    * - P1
      - `Pr√°ctica 1: una p√°gina web con HTML5 üñ•Ô∏è`_
      - 5 octubre 2023
      - 8 horas
      - 20%
    * - P2
      - `Pr√°ctica 2: una aplicaci√≥n web local üñ•Ô∏è`_
      - 2 noviembre 2023
      - 14 horas
      - 25%
    * - P3
      - `Pr√°ctica 3: una aplicaci√≥n con acceso a servicios web de terceros y con componentes web üñ•Ô∏è`_
      - 23 noviembre 2023
      - 12 horas
      - 25%
    * - P4
      - `Pr√°ctica 4: una aplicaci√≥n en la nube üñ•Ô∏è`_
      - 21 diciembre 2023 (provisional)
      - 20 horas
      - 30%


Instrucciones de entrega de las pr√°cticas
-----------------------------------------

Realiza tu entrega en un √∫nico fichero comprimido a trav√©s del `servidor web del Departamento`_ antes de las 23.59 del d√≠a de la fecha l√≠mite. Recuerda que no se admitir√°n entregas fuera de plazo.

.. _`servidor web del Departamento`: https://pracdlsi.dlsi.ua.es/index.cgi?id=val


Pr√°ctica 1: una p√°gina web con HTML5 üñ•Ô∏è
---------------------------------------

En esta pr√°ctica vas a crear un documento HTML5 en el que *todo* el formato recaiga en hojas de estilo CSS (por tanto, no es posible usar atributos como ``style`` para el formato). Tu documento se llamar√° ``index.html`` y tendr√° dos vistas diferentes, *normal* (la vista por defecto) y *compacta*; el usuario podr√° cambiar de vista en cualquier momento usando los enlaces a pie de p√°gina. El objetivo es que consigas un documento que se muestre exactamente como puedes ver en estas im√°genes de la `vista normal`_ y de la `vista compacta`_. Tu documento usar√° tres hojas de estilo: una con todo el contenido com√∫n a ambas vistas y dos m√°s correspondientes a cada una de las vistas. Para poder alternar entre ambas hojas de estilo, a√±ade este c√≥digo a la cabecera (``head``) de tu p√°gina:

.. _`vista normal`: _static/img/p1-vista-normal.png
.. _`vista compacta`: _static/img/p1-vista-compacta.png
.. _`este c√≥digo`: http://www.omnimint.com/A6/JavaScript/Change-external-CSS-stylesheet-file-with-JavaScript.html

.. code-block:: html

    <script type="text/javascript">
      function changeCSS(cssFile) {
        var oldlink = document.getElementById("estilo");
        var newlink = document.createElement("link")
        newlink.setAttribute("rel", "stylesheet");
        newlink.setAttribute("type", "text/css");
        newlink.setAttribute("id", "estilo");
        newlink.setAttribute("href", cssFile);
        document.getElementsByTagName("head")[0].replaceChild(newlink, oldlink);
      }
    </script>

Recuerda tambi√©n a√±adir posteriormente este c√≥digo en el pie de la p√°gina cuando lo crees:

.. code-block:: html

    <a href="#" onclick="changeCSS('./css/normal.css');">Vista normal</a> |
    <a href="#" onclick="changeCSS('./css/compact.css');">Vista compacta</a>

A√±ade, finalmente, un elemento como este a la cabecera de tu documento para que la vista normal sea la que se muestre por defecto:

.. code-block:: html

    <link id="estilo" rel="stylesheet" type="text/css" href="./css/normal.css">

Es muy importante que cuando implementes tu soluci√≥n te asegures de que respetas **estrictamente** estas instrucciones, incluidos los nombres de identificadores, nombres de fichero, etc.; respeta las may√∫sculas y min√∫sculas, las tildes, la posici√≥n de cada elemento en el documento, etc.

Marcado
~~~~~~~

Comienza preparando el documento HTML, sin tener en cuenta, por ahora, los aspectos estil√≠sticos. El documento HTML seguir√° los principios del lenguaje estudiados en clase. En particular, tendr√°:

- una cabecera (elemento ``header``) que incluya el t√≠tulo (elemento ``h1``), el p√°rrafo descriptivo y el √≠ndice (el √≠ndice ser√° un elemento de tipo ``nav`` que incluir√° una lista no numerada, ``ul``), los tres como descendientes inmediatos (hijos) del elemento ``header``;
- la cabecera ir√° seguida de un fragmento principal (encerrado en el elemento ``main``) que incluir√° ambos cuestionarios;
- la p√°gina acabar√° con un pie de p√°gina (elemento ``footer``) con tus datos y los enlaces para cambiar la vista; encierra tu nombre de usuario de ``alu.ua.es`` (por ejemplo, ``zawm``) en un ``span`` (hijo de ``footer``) con identificador ``nombre``; utiliza el car√°cter ``'|'`` en el documento HTML para separar los diferentes contenidos del pie de p√°gina.

Cada cuestionario estar√° incluido en su propia secci√≥n (mediante sendos elementos ``section``, que han de incluir atributos ``id``, con valores ``paris``, sin tilde y todo en min√∫sculas, y ``londres``, todo en min√∫sculas, que ser√°n referenciados desde el √≠ndice) y tendr√° un t√≠tulo de segundo nivel (un elemento ``h2``, que ser√° hijo de ``section``) que incluir√° una imagen (que no ha de coincidir necesariamente en tu soluci√≥n con la de este enunciado, pero no ha de tener tama√±o superior a 512x512 p√≠xeles) seguida del texto del t√≠tulo tal como sigue:

.. code-block::

    <section ...>
      <h2 ...>
        <img ...>
        Cuestionario sobre...
      </h2>

La forma de codificar cada pregunta ser√° la siguiente:

.. code-block:: html

    <div class="bloque">
      <div class="pregunta">
      La ciudad de Par√≠s se sit√∫a a ambos lados del r√≠o Sena.
      </div>
      <div class="respuesta" data-valor="true">
      </div>
    </div>

El contador de pregunta se ha de inicializar para cada nuevo cuestionario. El atributo ``data-valor`` es un atributo personalizado de HTML que usaremos para almacenar la respuesta (true/false) a la pregunta. En general, no es posible a√±adir a un elemento atributos que no est√©n especificados en el est√°ndar excepto si estos comienzan por el prefijo ``data-``. 

Tanto los n√∫meros de pregunta como el texto usado en la p√°gina para indicar la respuesta correcta no pueden aparecer expl√≠citamente en el documento HTML, sino que han de ser generados din√°micamente desde CSS.

Estilo
~~~~~~

Una vez tengas el documento HTML finalizado, puedes pasar a dise√±ar las hojas de estilo. Para el contador de preguntas, a√±ade un n√∫mero secuencial a cada pregunta obtenido autom√°ticamente mediante un uso adecuado de los `contadores de CSS`_. Para las respuestas usa los `pseudoelementos CSS`_ ``::before`` y ``::after``.

.. _`contadores de CSS`: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Counters
.. _`pseudoelementos CSS`: http://www.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/

Se describen a continuaci√≥n las caracter√≠sticas comunes de ambas vistas:

- la p√°gina completa (elemento ``body``) tiene fondo blanco, letra de color ``#333333`` y no tiene margen (esto es, el margen se ha de establecer expl√≠citamente a cero);
- la cabecera (elemento ``header``) tiene un ancho m√°ximo de 1080px y m√°rgenes autom√°ticos a derecha e izquierda; su ancho, adem√°s, es el 98% del de la p√°gina para que siempre haya un peque√±o margen entre el contenido de la p√°gina y la ventana del navegador; el texto de la cabecera est√° centrado;
- los encabezados de nivel 1 usan letra negrita de 36px;
- los encabezados de nivel 2 usan letra negrita de 25px;
- el √≠ndice no usa ning√∫n adorno especial de lista; los enlaces del √≠ndice no aparecen subrayados; lo √∫nico que los identifica como enlaces es su color (``cornflowerblue``) y el hecho de que el cursor del rat√≥n cambia al pasar sobre ellos;
- el fragmento principal (elemento ``main``) tiene un ancho m√°ximo de 1080px y m√°rgenes autom√°ticos a derecha e izquierda; su ancho, adem√°s, es el 98% del de la p√°gina para que siempre haya un peque√±o margen entre el contenido de la p√°gina y la ventana del navegador;
- la secci√≥n correspondiente a cada cuestionario tiene un margen superior de 80px;
- cada pregunta (selector ``.pregunta``) tiene un margen superior e inferior de 1ex;
- el texto en otro idioma (*arrondissement*) se marca con la clase *idioma* (usa un elemento ``span`` para rodear la palabra) y se muestra en it√°lica;
- la imagen junto al t√≠tulo de cada cuestionario est√° alineada verticalmente con la parte superior de la l√≠nea (``text-top``) y se escala *mediante CSS* a un tama√±o de 50x50 p√≠xels; la separa del encabezado un margen de 10px por la derecha; la imagen tiene un borde de 1px s√≥lido de color ``lightgray``;
- el pie de p√°gina (elemento ``footer``) tiene una altura de 50px y un margen superior de 100px; el color de fondo es ``steelblue`` y su anchura abarca el 100% de la ventana del navegador; el texto de una sola l√≠nea incluido usa una letra de tama√±o 80% de color ``white``, excepto para los enlaces, que usan color ``lightgray``; el texto, adem√°s, est√° centrado verticalmente, lo que puedes conseguir siguiendo la primera recomendaci√≥n de `esta respuesta`_, y horizontalmente; ten en cuenta, adem√°s, que si el tama√±o de la ventana de tu navegador es superior al tama√±o de la p√°gina (lo que puede suceder si abres la p√°gina sin haber a√±adido los diferentes cuestionarios), el pie de p√°gina no quedar√° pegado al borde inferior de la ventana; el comportamiento anterior es correcto y no has de cambiarlo.

.. _`esta respuesta`: http://stackoverflow.com/questions/9249359/is-it-possible-to-vertically-align-text-within-a-div/14850381#14850381

Las caracter√≠sticas particulares de la vista compacta son:

- usa el tipo de letra Ubuntu_ para todo el documento; para ver c√≥mo usar en tus estilos un tipo de letra de Google Fonts, haz clic en :guilabel:`Select this font` en la p√°gina correspondiente al tipo de letra y despu√©s haz clic en la caja que aparece en la parte inferior de la ventana;
- cada pregunta/respuesta (selector ``.bloque``) tiene  un margen superior de 10px e inferior de 20px.

.. _Ubuntu: https://fonts.google.com/specimen/Ubuntu?selection.family=Ubuntu
.. _`p√°gina correspondiente al tipo de letra`: https://fonts.google.com/specimen/Ubuntu?selection.family=Ubuntu

Las caracter√≠sticas particulares de la vista normal son:

- usa el tipo de letra Droid Serif  para todo el documento; la web que describ√≠a_ este tipo de letra ya no est√° en Google Fonts, pero puedes seguir us√°ndola a√±adiendo lo siguiente a tu p√°gina:

.. _describ√≠a: https://fonts.google.com/specimen/Droid+Serif

.. code-block:: html

    <link href='https://fonts.googleapis.com/css?family=Droid+Serif' rel='stylesheet' type='text/css'>

y lo siguiente a tu hoja de estilo:

.. code-block:: css

  font-family: 'Droid Serif', serif;

- cada pregunta/respuesta (selector ``.bloque``) tiene un fondo de color ``whitesmoke``; su borde es s√≥lido de 1px de ancho y color ``lightgray``; el margen superior es de 10px y el inferior de 20px; el relleno (*padding*) es de 10px; la sombra de la caja se obtiene dando el siguiente valor a la propiedad CSS ``box-shadow`` (averigua para qu√© sirve cada par√°metro):

.. code-block:: css

    box-shadow: 6px 6px 3px slategray;

Aunque es una pr√°ctica habitual, no resetees a cero los m√°rgenes y el relleno de todos los estilos del documento mediante una regla que use el selector universal ``*``.

Recomendaciones finales
~~~~~~~~~~~~~~~~~~~~~~~

Aseg√∫rate de que tus ficheros se validan correctamente con los validadores HTML5 y CSS del W3C (usando la pesta√±a :guilabel:`Validate by File Upload` en ambos casos). Adem√°s, usa Chrome DevTools para comprobar que el estilo aplicado en cada punto del documento es correcto. Finalmente, aseg√∫rate de que cumple con todas las especificaciones de este enunciado (por ejemplo, los nombres o valores de atributos, elementos o ficheros).

Recuerda poner tu usuario de la cuenta de ``alu.ua.es`` (pero sin la arroba y el dominio) en el pie del documento. Realiza tu entrega en un √∫nico fichero comprimido llamado ``p1-dai.zip`` a trav√©s del `servidor web del Departamento`_. El archivo comprimido contendr√° directamente (sin ninguna carpeta contenedora) el fichero ``index.html``, una carpeta ``css`` con los ficheros con las hojas de estilo que hayas usado y una carpeta ``img`` con las im√°genes.

Por √∫ltimo, coloca en alg√∫n punto del pie de la p√°gina un fragmento de HTML como ``<span id="tiempo">[5 horas]</span>`` donde has de sustituir el 5 por el n√∫mero de horas aproximadas que te haya llevado hacer esta pr√°tica.

.. _`servidor web del Departamento`: https://pracdlsi.dlsi.ua.es/index.cgi?id=val



Pr√°ctica 2: una aplicaci√≥n web local üñ•Ô∏è
---------------------------------------

En esta pr√°ctica extender√°s la pr√°ctica anterior con la incorporaci√≥n de elementos din√°micos mediante JavaScript. En particular, ser√° posible a√±adir y eliminar cuestionarios, as√≠ como a√±adir y eliminar sus preguntas; todo ello en el navegador, sin interaccionar con ning√∫n servidor o base de datos. Para ello, la secci√≥n ``main`` del documento tendr√° al principio un formulario que permitir√° a√±adir nuevos cuestionarios indicando su t√≠tulo y su imagen asociada; adem√°s, al principio de cada cuestionario (tras el t√≠tulo e inmediatamente antes de la primera pregunta, si la hubiera) se mostrar√° otro formulario que permitir√° a√±adir una nueva pregunta y su respuesta (verdadero o falso) al final del cuestionario correspondiente. Se permitir√°, adem√°s, borrar individualmente las preguntas de los cuestionarios.

Aseg√∫rate de que sigues los siguientes pasos en el orden en que aparecen en estas instrucciones para que la realizaci√≥n de la pr√°ctica sea m√°s sencilla. Repasa, adem√°s, todo lo estudiado en clase sobre JavaScript antes de comenzar la implementaci√≥n. No puedes utilizar ninguna librer√≠a externa en tu soluci√≥n. Al igual que en la pr√°ctica anterior, tu documento ha de ser v√°lido en cada momento.

Eliminaci√≥n de la doble vista
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Elimina las dos vistas del documento de la pr√°ctica anterior y deja √∫nicamente la vista *normal*. Para ello, borra todo el c√≥digo JavaScript relacionado con el cambio de estilo, as√≠ como los dos enlaces que hab√≠a en el pie de p√°gina para alternar entre los dos estilos. Fusiona todo el CSS que afectaba a la vista *normal* en un √∫nico documento CSS de nombre ``normal.css``.

Adici√≥n del formulario para insertar un nuevo cuestionario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A√±ade el siguiente c√≥digo al principio del bloque ``main`` de tu documento:

.. code-block:: html

  <div class="formulario" id="nuevoCuestionario">
    <ul>
      <li>
        <label for="tema">Tema del cuestionario:</label>
        <input type="text" name="tema" id="tema" autofocus>
      </li>
      <li>
        <label for="imagen">URL de la imagen:</label>
        <input type="url" name="imagen" id="imagen">
      </li>
      <li>
        <input type="button" name="crea" value="Crear nuevo cuestionario">
      </li>
    </ul>
  </div>

Este c√≥digo define los elementos necesarios para el formulario de creaci√≥n de un nuevo cuestionario. Cada campo a insertar se representa en el formulario con una etiqueta (elemento ``<label>``) y una entrada (elemento ``<input>``); ambos se incluyen como elementos dentro de una lista. El bot√≥n que se a√±ade como √∫ltimo elemento de la lista ejecutar√° al ser pulsado el c√≥digo JavaScript de creaci√≥n del cuestionario. Es importante que respetes escrupulosamente el fragmento de c√≥digo anterior, incluyendo los nombres de las clases e identificadores.

Date cuenta de que, en este caso, no usamos un elemento de tipo ``<form>``, sino un ``<div>`` para contener el formulario, con lo que no es necesario desactivar el env√≠o de datos y la recarga autom√°tica de la p√°gina que ocurre con los formularios de tipo ``<form>``. Observa, adem√°s el uso del atributo `for` en las etiquetas para asociarlas con los campos de texto correspondientes; esto mejora la accesibilidad de la p√°gina.

Todos los formularios de la aplicaci√≥n han de permitir a√±adir nuevos cuestionarios o preguntas pulsando la tecla ``enter`` dentro del cuadro de texto, adem√°s de haciendo clic en el bot√≥n correspondiente. Tendr√°s que basarte para ello en el evento ``keydown`` y en propiedades como ``KeyboardEvent.key``; observa, de paso, que probablemente encontrar√°s mucha informaci√≥n en la web sobre eventos como ``keypress`` o propiedades como ``KeyboardEvent.keyCode``, pero ambas est√°n obsoletas y desaparecer√°n de funcionas versiones de los navegadores. En el desarrollo web es importante que siempre te asegures de que las funciones o propiedades son las adecuadas; puedes consultar para ello webs de referencia como Mozilla Developer Network.

Estilo del formulario
~~~~~~~~~~~~~~~~~~~~~

Respeta las siguientes directrices a la de hora de dar estilo al formulario. Como m√°s adelante usar√°s estos mismos estilos para el resto de formularios, basa tus selectores de CSS en la clase ``.formulario`` y no en el atributo ``id`` del formulario del apartado anterior:

- el elemento ``<ul>`` que contiene los distintos campos no usa ning√∫n estilo de lista para sus elementos (de lo contrario, aparecer√≠a un topo o bala antes de cada elemento de la lista) y no tiene relleno (el *padding* es cero); adem√°s, su margen superior es de 30px, el inferior de 20px y el derecho e izquierdo son de 0px;
- cada elemento de la lista (elemento ``<li>``) tiene un relleno (por los cuatro lados) de 12px y un borde inferior s√≥lido de grosor 1px y color ``#eee``;
- adem√°s, el primer elemento de la lista tendr√° un borde superior s√≥lido de grosor 1px y color #777; el √∫ltimo elemento de la lista tendr√° un borde inferior de id√©nticas caracter√≠sticas; identifica cu√°l de las `pseudoclases de CSS`_ te puede ser √∫til para esto;
- el contenido de los elementos ``<label>`` se ha de mostrar con el valor ``inline-block`` para la propiedad ``display`` (que trata el contenido del elemento como una combinaci√≥n de ``inline`` y ``block``) lo que nos permitir√° darle un ancho fijo de 15em y conseguir que las cajas de introducci√≥n de texto queden bien alineadas unas respecto a otras;
- aquellos elementos de tipo ``<input>`` del formulario que tengan su atributo ``type`` con valor ``text`` o ``url`` (el bot√≥n, por tanto, queda excluido) tendr√° un borde s√≥lido de 1px de grosor y color ``#aaa``; a√±√°deles, adem√°s, estos atributos para conseguir una mayor definici√≥n de la caja:

.. code-block:: css

  box-shadow: 0px 0px 3px #ccc, 0 5px 8px #eee inset;
  border-radius:2px;

.. _`pseudoclases de CSS`: https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements

Documento HTML
~~~~~~~~~~~~~~

Las √∫nicas diferencias en el documento HTML respecto a la pr√°ctica anterior es la supresi√≥n de todo lo relacionado con el uso de las dos hojas de estilo, la incorporaci√≥n del formulario de creaci√≥n de cuestionarios y, evidentemente, la inserci√≥n de un elemento ``<script>`` para cargar desde un fichero externo (atributo ``src`` de ``<script>``) el c√≥digo JavaScript que escribas. Ten en cuenta que tu documento HTML no puede contener ning√∫n c√≥digo en CSS ni en JavaScript.

Adici√≥n de iconos para borrar cada pregunta
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

En primer lugar, vamos a a√±adir a las (cinco) cajas existentes para bloques de pregunta un icono que permita eliminar el bloque completo (n√∫mero, enunciado y respuesta) de la p√°gina. Crea para ello una funci√≥n ``addCruz`` que reciba como par√°metro un objeto de tipo nodo que apunte a un elemento de clase ``.bloque``. La funci√≥n crear√° un nodo que contega un elemento como el siguiente

.. code-block:: html

  <div class="borra">‚òí</div>

y lo insertar√° como primer hijo del nodo ``.bloque`` pasado como par√°metro. El contenido corresponde al car√°cter Unicode `2612`_.

.. _`2612`: http://unicode-table.com/en/2612/

El estilo de los elementos de clase ``.borra`` usar√° posicionamiento absoluto para situarse a 2px del extremo derecho y 1px del extremo superior de la caja del elemento ``.bloque`` que lo contiene. *Nota:* para que este posicionamiento funcione tendr√°s que *posicionar* el elemento ``.bloque``. Adem√°s, el cursor del rat√≥n al pasar por encima de la cruz de borrado adoptar√° el estilo ``pointer``. Ten en cuenta que estos estilos (u otros de esta pr√°ctica) no se aplicar√°n directamente desde el c√≥digo en JavaScript, sino que este se limitar√° a asignar determinados valores al atributo ``class`` de los elementos y ser√° la hoja de estilo CSS la que establezca las propiedades est√©ticas oportunas. 

Por √∫ltimo, a√±ade un manejador de evento al nuevo nodo de manera que se invoque a una funci√≥n ``borraPregunta`` (definida m√°s adelante) cuando se haga clic en el elemento.

Recuerda que puedes evaluar la correcci√≥n de tu funci√≥n desde la consola de JavaScript del navegador.

Funciones auxiliares a crear
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Durante la implementaci√≥n de la pr√°ctica te ser√°n de utilidad algunas funciones que puedes definir y evaluar ahora:

- ``insertAsLastChild(padre,nuevoHijo)``: inserta el nodo ``nuevoHijo`` como √∫ltimo hijo del nodo ``padre``; esta funci√≥n puede delegar en la funci√≥n `append`_ directamente.
- ``insertAsFirstChild(padre,nuevoHijo)``: inserta el nodo ``nuevoHijo`` como primer hijo del nodo ``padre``; esta funci√≥n puede delegar en `prepend`_ directamente.
- ``insertBeforeChild(padre,hijo,nuevoHijo)``: inserta el nodo ``nuevoHijo`` como hijo del nodo ``padre`` inmediatamente antes del nodo ``hijo``; esta funci√≥n usar√° `insertBefore`_.
- ``removeElement(nodo)``: elimina del DOM el nodo pasado como par√°metro; esta funci√≥n puede delegar en `remove`_ directamente.

.. _`append`: https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append
.. _`prepend`: https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend
.. _`insertBefore`: https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
.. _`remove`: https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove

No es obligatorio que definas todas las funciones anteriores. La idea es que tengas presente mientras programas una especie de *caja de herramientas* de funciones que te pueden ser √∫tiles en uno u otro momento, pero, dado que algunas son extremadamente cortas, puedes usar las funciones adecuadas del API del navegador directamente.

Adem√°s, te ser√° de suma utilidad disponer de una funci√≥n que funcione de forma similar a ``querySelector`` pero buscando el primer ancestro (en lugar de descendiente) que concuerde con el selector:

- ``queryAncestorSelector(node,selector)``: devuelve el ancestro m√°s cercano a ``node`` que case con el selector indicado como segundo par√°metro o ``null`` si no existe ninguno; ``node`` ha de ser un nodo inferior en el √°rbol a ``document.body``.

La siguiente es una posible implementaci√≥n de la funci√≥n que puedes copiar en tu pr√°ctica despu√©s de asegurarte de que la entiendes perfectamente:

.. code-block:: javascript

  function queryAncestorSelector (node,selector) {
    var parent= node.parentNode;
    var all = document.querySelectorAll(selector);
    var found= false;
    while (parent !== document && !found) {
      for (var i = 0; i < all.length && !found; i++) {
        found= (all[i] === parent)?true:false;
      }
      parent= (!found)?parent.parentNode:parent;
    }
    return (found)?parent:null;
  }

.. Note::

  Versiones recientes de los navegadores permiten usar la funci√≥n closest_ que tiene un comportamiento similar a ``queryAncestorSelector``, pero no es necesario que la uses en tu pr√°ctica.

  .. _closest: https://developer.mozilla.org/en-US/docs/Web/API/Element/closest

Esta funci√≥n la usaras cuando desde un nodo determinado del DOM quieras acceder a un ancestro para el que conoces un selector, pero no conoces la *distancia* exacta a la que se encuentra o no te interesa hacer que tu c√≥digo dependa en exceso de dicha distancia porque en el futuro podr√≠a haber m√°s nodos intermedios en el √°rbol y no quieres tener que modificar el c√≥digo de JavaScript si esto ocurre. Por ejemplo, considera este fragmento de HTML:

.. code-block::  html

  <a>
    <b>
      ...
      <c>
        <d>
        </d>
      </c>
      ...
      <e>
      </e>
      ...
      <f>
      </f>
    </b>
  </a>

Si ``x`` representa el nodo correspondiente al elemento ``d`` y quieres acceder a informaci√≥n del nodo ``a``, podr√≠a hacerse algo como:

.. code-block::  javascript

  x.parentNode.parentNode.parentNode

o, con ayuda de la nueva funcion, simplemente

.. code-block::  javascript

  queryAncestorSelector(x,"a");

Otro ejemplo: para acceder al elemento ``f`` desde ``x``, se puede hacer:

.. code-block::  javascript

  queryAncestorSelector(x,"b").querySelector("f");

Borrado de preguntas
~~~~~~~~~~~~~~~~~~~~

Escribe ahora el c√≥digo para ``borraPregunta``, el manejador del evento discutido en m√°s arriba. Esta funci√≥n usar√° el objeto de tipo evento recibido como par√°metro para acceder al elemento sobre el que se ha hecho clic. A partir de este elemento, usando ``queryAncestorSelector``, acceder√° al ancestro con selector ``.bloque`` y lo eliminar√° del documento, es decir, eliminar√° el nodo correspondiente del DOM. Adem√°s, cuando el cuestionario se quede sin ninguna pregunta, este se eliminar√° por completo del DOM, as√≠ como su entrada en el √≠ndice al principio de la p√°gina.

Incorporaci√≥n autom√°tica de los botones de borrado
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Crea una funci√≥n ``init``, que sea invocada por el manejador del evento ``DOMContentLoaded`` y que recorra todos los elementos de clase ``.bloque`` e invoque la funci√≥n ``addCruz`` (definida anteriormente) sobre cada uno de ellos. En estos momentos, al abrir tu documento, cada pregunta deber√≠a tener su icono de borrado y deber√≠a ser posible dejar el documento sin cuestionarios tras borrar todos los bloques de preguntas.

Adici√≥n de formularios de inserci√≥n de preguntas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A diferencia del formulario de creaci√≥n de cuestionarios, el formulario de adici√≥n de una nueva pregunta se crea din√°micamente para cada cuestionario. Crea ahora una funci√≥n ``addFormPregunta`` que se encargue de ello. Esta funci√≥n recibe como par√°metro el nodo correspondiente al elemento ``section`` de un determinado cuestionario, crea din√°micamente un formulario como el siguiente y lo inserta a continuaci√≥n del t√≠tulo del cuestionario (antes de la primera pregunta, si la hubiera):

.. code-block:: html

  <div class="formulario">
    <ul>
      <li>
        <label for="paris_pregunta">Enunciado de la pregunta:</label>
        <input type="text" name="paris_pregunta" id="paris_pregunta">
      </li>
      <li>
        <label>Respuesta:</label>
        <input type="radio" name="paris_respuesta" value="verdadero" id="paris_v" checked>
        <label for="paris_v" class="radio">Verdadero</label>
        <input type="radio" name="paris_respuesta" value="falso" id="paris_f">
        <label for="paris_f" class="radio">Falso</label>
      </li>
      <li>
        <input type="button" value="A√±adir nueva pregunta">
      </li>
    </ul>
  </div>

Un comentario sobre los atributos ``name`` de los botones de radio: dado que estos no pueden tener los mismos valores para los distintos formularios del documento (de otro modo, todos los botones de radio ser√≠an considerados como un √∫nico conjunto por el navegador y activar uno de ellos en un cuestionario desactivar√≠a el resto de botones en los otros cuestionarios), en esta pr√°ctica has de a√±adir como prefijo de la cadena que elijas el valor del atributo ``id`` del elemento ``section`` correspondiente seguido de un car√°cter de subrayado. Tendr√°s que hacer algo similar para evitar duplicados con los atributos ``id`` y los correspondientes atributos ``for`` de los botones de radio, el enunciado de la pregunta y las etiquetas asociadas. Por tanto, los valores ``paris_pregunta``, ``paris_respuesta``, ``paris_v`` y ``paris_f`` del c√≥digo anterior son meramente ilustrativos y han de ser sustituidos por los valores correctos en cada cuestionario.

Para que las etiquetas (``<label>``) con verdadero y falso que acompa√±an a los botones de radio no est√©n excesivamente separadas entre ellas, a√±ade una regla de CSS que establezca un ancho de ``5em`` para el selector ``label.radio``. Observa de paso c√≥mo estos elementos favorecen la accesibilidad al indicar expl√≠citamente mediante el atributo ``for`` el bot√≥n de radio al que complementan.

La funci√≥n finalizar√° especificando la funci√≥n ``addPregunta`` (analizada a continuaci√≥n) como funci√≥n manejadora del evento de clic sobre el bot√≥n.

Inserci√≥n de nuevas preguntas en un cuestionario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Al igual que la funci√≥n ``borraPregunta``, la funci√≥n ``addPregunta`` utilizar√° tambi√©n el objeto de tipo evento recibido como par√°metro para acceder (con ayuda de funciones como ``querySelectorAncestor`` o ``querySelector``) a los datos introducidos en el formulario correspondiente.

En primer lugar, la funci√≥n comprobar√° que ninguno de los campos del formulario haya quedado sin rellenar; si alguno de los campos estuviera vac√≠o, se mostrar√° un `di√°logo de alerta`_ con un texto descriptivo de la causa del error que puedes escoger libremente. En otro caso, se proceder√° a crear un nuevo elemento ``<div>`` de clase ``.bloque`` para la nueva pregunta, al que se a√±adir√° el icono de borrado mediante una llamada a la funci√≥n ``addCruz``.

.. _`di√°logo de alerta`: https://developer.mozilla.org/en-US/docs/Web/API/Window.alert

Finalmente, la funci√≥n dejar√° en blanco el contenido de los campos del formulario, excepto el correspondiente a los botones de radio, que se quedar√° en el valor *verdadero*.

Incorporaci√≥n autom√°tica de los formularios de inserci√≥n de preguntas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A√±ade c√≥digo a la funci√≥n ``init`` que recorra todos los elementos de tipo ``section`` del documento inicial e inserte en ellos los formularios de adici√≥n de preguntas con la funci√≥n definida anteriormente.

Creaci√≥n de nuevos cuestionarios
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A√±ade tambi√©n a la funci√≥n ``init`` c√≥digo que asocie la funci√≥n ``addCuestionario`` explicada a continuaci√≥n como manejadora del evento de clic sobre el bot√≥n del formulario de creaci√≥n de nuevo formulario.

La funci√≥n ``addCuestionario`` utilizar√° el objeto de tipo evento recibido como par√°metro para acceder (con ayuda de funciones como ``querySelectorAncestor`` o ``querySelector``) a los datos introducidos en el formulario de creaci√≥n de cuestionarios. La funci√≥n comprobar√° que ninguno de los campos del formulario haya quedado sin rellenar; si alguno de los campos estuviera vac√≠o, se mostrar√° un di√°logo de alerta con un texto descriptivo de la causa del error que puedes escoger libremente. No has de comprobar, en cualquier caso, que la URL indicada sea v√°lida ni corresponda a una imagen existente en internet. Si todos los campos del formulario se han rellenado, se proceder√° a crear un elemento de tipo ``<section>`` que acoger√° un nuevo formulario y que se a√±adir√° a continuaci√≥n del √∫ltimo formulario de la p√°gina. El t√≠tulo del cuestionario ser√° "Cuestionario sobre " seguido del valor del primer campo del formulario; la URL de la imagen a usar ser√° la indicada en el segundo campo. Recuerda tambi√©n que has de a√±adir una nueva entrada al √≠ndice de cuestionarios de la cabecera del documento.

Dado que cada secci√≥n ha de tener un atributo de tipo ``id`` (por ejemplo, para enlazarlo desde el √≠ndice), en tu implementaci√≥n usa como valor del identificador el car√°cter "c" seguido del valor de una variable global que se inicializar√° a 1 y se incrementar√° tras la creaci√≥n de cada cuestionario. Date cuenta de que los cuestionarios presentes inicialmente en la p√°gina web ya tienen sus propios valores de ``id``, por lo que el primer cuestionario que se cree tendr√° ``c1`` por ``id``, el segundo ``c2``, etc. El contador global nunca se decrementar√°, aunque se borre un cuestionario. Observa, tambi√©n, que la √∫nica manera de borrar un cuestionario es mediante el borrado de la √∫ltima de sus preguntas, por lo que no es posible en esta pr√°ctica borrar un cuestionario para el que no se ha introducido ninguna pregunta a√∫n.

Tras la creaci√≥n e inserci√≥n del nuevo elemento ``<section>``, se proceder√° a incorporarle el formulario de creaci√≥n de preguntas mediante la oportuna llamada a ``addFormPregunta``.

Adem√°s, la funci√≥n ``addCuestionario`` dejar√° en blanco el contenido de los campos del formulario.

Captura de pantalla
~~~~~~~~~~~~~~~~~~~

Observa en `esta imagen`_ como quedar√≠a la p√°gina web una vez a√±adidos dos cuestionarios con sendas preguntas.

.. _`esta imagen`: _static/img/dai-p2-captura.png

Entrega de la pr√°ctica
~~~~~~~~~~~~~~~~~~~~~~

Aseg√∫rate de que tanto tus ficheros iniciales como cualquier estado posterior del DOM se validan correctamente con los validadores HTML5 y CSS del W3C. Adem√°s, usa Chrome DevTools para comprobar que el estilo aplicado en cada punto del documento es correcto y para depurar tu c√≥digo en JavaScript. Finalmente, aseg√∫rate de que tu implementaci√≥n cumple con todas las especificaciones de este enunciado.

Recuerda mantener tu nombre de usuario de la universidad en el pie del documento. Realiza tu entrega en un √∫nico fichero comprimido llamado ``p2-dai.zip`` a trav√©s del servidor web del Departamento. El archivo comprimido contendr√° directamente (sin ninguna carpeta contenedora) el fichero ``index.html``, una carpeta ``css`` con el fichero ``normal.css``, una carpeta ``img`` con las im√°genes de Londres y Par√≠s, y una carpeta ``js`` con el c√≥digo en JavaScript.

Por √∫ltimo, coloca en alg√∫n punto del pie de la p√°gina un fragmento de HTML como ``<span id="tiempo">[10 horas]</span>`` donde has de sustituir el 10 por el n√∫mero de horas aproximadas que te haya llevado hacer esta pr√°ctica.


Pr√°ctica 3: una aplicaci√≥n con acceso a servicios web de terceros y con componentes web üñ•Ô∏è
------------------------------------------------------------------------------------------

En esta pr√°ctica ampliar√°s tu pr√°ctica anterior para integrarla con diferentes servicios web proporcionados por terceros a trav√©s de APIs; en particular, la imagen a mostrar junto al t√≠tulo de cada cuestionario ser√° tomada de alguna de las im√°genes relevantes ofrecidas por `Flickr`_; adem√°s, cada cuestionario mostrar√° un peque√±o texto extraido de `Wikipedia en espa√±ol`_ sobre el tema en cuesti√≥n. En la segunda parte, crear√°s algunos componentes web para encapsular adecuadamente toda esta informaci√≥n.

.. _`Flickr`: https://www.flickr.com/
.. _`Wikipedia en espa√±ol`: https://es.wikipedia.org/

No est√° permitido usar librer√≠as de terceros para interactuar con los distintos servicios web, sino que lo has de hacer con el API Fetch est√°ndar estudiado en clase. Tampoco est√° permitido usar librer√≠as de alto nivel para los componentes web.

Ejemplo de peticiones GET
~~~~~~~~~~~~~~~~~~~~~~~~~

Lo siguiente es un ejemplo de la petici√≥n que has de realizar para obtener informaci√≥n sobre Par√≠s:

`<https://es.wikipedia.org/w/api.php?origin=*&format=json&action=query&prop=extracts&exintro&explaintext&continue&titles=par√≠s>`_

Consulta en la `documentaci√≥n del API de Wikipedia`_ el prop√≥sito de cada par√°metro; la mayor parte de ellos, en cualquier caso, proviene de la `extensi√≥n TextExtracts`_. Usa algunos ejemplos para determinar cu√°l es la propiedad de la cadena en JSON devuelta que contiene la informaci√≥n que te interesa y qu√© ocurre cuando el t√©rmino no se encuentra en la Wikipedia.

.. _`documentaci√≥n del API de Wikipedia`: https://www.mediawiki.org/wiki/API:Main_page/en
.. _`extensi√≥n TextExtracts`: https://www.mediawiki.org/wiki/Extension:TextExtracts

Por otro lado, lo siguiente es un ejemplo de la petici√≥n que has de realizar a Flickr para obtener las im√°genes m√°s relevantes de Par√≠s (es necesario indicar un valor correcto de ``api_key`` en lugar de ``xxxxx``, seg√∫n se indica m√°s adelante):

`<https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=xxxxx&text=par%C3%ADs&format=json&per_page=10&media=photos&sort=relevance&nojsoncallback=1>`_

Consulta la `documentaci√≥n del API de Flickr`_ para entender el prop√≥sito de cada par√°metro de la llamada anterior; el resultado es una lista de im√°genes de la que nos interesa el *id* de la primera para realizar una segunda llamada que nos permita acceder a la URL de dicha imagen:

.. _`documentaci√≥n del API de Flickr`: https://www.flickr.com/services/api/

`<https://api.flickr.com/services/rest/?method=flickr.photos.getSizes&api_key=xxxxxx&photo_id=13942935893&format=json&nojsoncallback=1>`_

De la lista de im√°genes devuelta por la petici√≥n anterior, te has de quedar con la primera de ellas, que corresponder√° a la versi√≥n de menor tama√±o; ten en cuenta, en cualquier caso, que tu estilo CSS seguir√° ajustando la imagen a un tama√±o concreto, como se hizo en pr√°cticas anteriores. Usa siempre en tu pr√°ctica las dos peticiones consecutivas a Flickr y no intentes componer autom√°ticamente la URL de la imagen tras la primera petici√≥n. Adem√°s, utiliza el protocolo *https* en todas las peticiones a Wikipedia y Flickr.

Incorporaci√≥n de informaci√≥n de la Wikipedia
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

La petici√≥n a Wikipedia se har√° de forma as√≠ncrona tras a√±adir el formulario del cuestionario; el resultado devuelto se a√±adir√° inmediatamente antes del nodo del formulario y despu√©s del t√≠tulo del cuestionario en un ``div`` con clase ``wiki``. Si no existe ninguna entrada en Wikipedia para el t√©rmino correspondiente, este ``div`` ha de incluirse pero sin contenido alguno. El estilo aplicado a los elementos de clase ``wiki`` utiliza un tama√±o de tipo de letra del 90%; este es el √∫nico cambio en el CSS que has de realizar por ahora.

Ten en cuenta que al borrar un cuestionario tambi√©n se ha de borrar ahora el texto descriptivo asociado. Muestra el contenido del atributo ``extract``, cuando exista, de la clave contenida en ``query.pages`` (``query.pages.*.extract``).

Comienza modificando la funci√≥n ``addFormPregunta`` para que devuelva el nodo del formulario creado. A continuaci√≥n, crea una funci√≥n ``addWikipedia`` que reciba como par√°metros la cadena con el t√©rmino a buscar y el nodo que representa el formulario del cuestionario; esta funci√≥n utiliza el API de la Wikipedia de forma as√≠ncrona para a√±adir la descripci√≥n devuelta por la Wikipedia para el t√©rmino indicado; el punto de inserci√≥n ser√° antes del formulario cuyo nodo se ha pasado como par√°metro.

Aseg√∫rate de que a la vez que a√±ades los formularios a los cuestionarios existentes inicialmente (sobre Par√≠s y Londres), tambi√©n llamas a ``addWikipedia`` para incorporar la descripci√≥n correspondiente. Usa como t√©rmino a buscar el ``id`` de cada elemento ``section``; para que esto funcione cambia el ``id`` del primer cuestionario de ``paris`` a ``par√≠s`` en el fichero HTML (HTML5 permite casi cualquier car√°cter como valor de un atributo *id* por lo que puedes utiliza caracteres acentuados sin problema). *Nota:* para los cuestionarios a√±adidos din√°micamente no usar√°s el *id*, ya que este tendr√° la forma *c1*, *c2*, etc., sino que usar√°s el tema obtenido del formulario de inserci√≥n.

No olvides a√±adir la correspondiente llamada a ``addWikipedia`` a la funci√≥n ``addCuestionario``.

Usa una `expresi√≥n regular`_ y el m√©todo ``replace`` aplicado a cadenas de JavaScript para eliminar todos los n√∫meros entre corchetes (incluyendo los corchetes) del resultado devuelto por la Wikipedia.

.. _`expresi√≥n regular`: https://www.tutorialrepublic.com/javascript-tutorial/javascript-regular-expressions.php

Incorporaci√≥n de la informaci√≥n de Flickr
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cr√©ate en primer lugar un usuario en `Flickr`_ y accede al `apartado de desarrolladores`_ para obtener una clave (*API key*) que usar en el par√°metro ``api_key`` de la petici√≥n.

.. _`apartado de desarrolladores`: https://www.flickr.com/services/api/misc.api_keys.html

Sigue unos pasos similares a los del texto de la Wikipedia, pero ahora con la imagen. Crea una funci√≥n ``addFlickr`` que reciba como par√°metros la cadena con el t√©rmino a buscar y el nodo que representa la imagen del cuestionario; esta funci√≥n utiliza el API de Flickr de forma as√≠ncrona para colocar (como valor del atributo ``src``) en el nodo recibido como par√°metro la primera imagen devuelta por Flickr para el t√©rmino correspondiente seg√∫n se ha indicado anteriormente. En caso de que no exista ninguna imagen para dicho t√©rmino, la imagen a mostrar ha de ser `esta del planeta Tierra`_.

.. _`esta del planeta Tierra`: http://eoimages.gsfc.nasa.gov/images/imagerecords/57000/57723/globe_east_540.jpg

Aseg√∫rate de que a la vez que a√±ades los formularios y la descripci√≥n de la Wikipedia a los cuestionarios existentes inicialmente (sobre Par√≠s y Londres), tambi√©n llamas a ``addFlickr`` para incorporar la imagen correspondiente, que sustituir√° a la mostrada inicialmente. Usa de nuevo como t√©rmino a buscar el ``id`` de cada elemento ``section``.

Finalmente, a√±ade la correspondiente llamada a ``addFlickr`` a la funci√≥n ``addCuestionario`` y comprueba que se a√±ade correctamente una nueva imagen con cada nuevo cuestionario. Elimina el campo del formulario de nuevo cuestionario que permit√≠a indicar la URL de la imagen a incluir (borra el elemento ``li`` correspondiente), ya que ya no es necesario; aseg√∫rate tambi√©n de que no queda rastro de √©l en el c√≥digo JavaScript.

Creaci√≥n de los componentes web
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

En esta parte final de la pr√°ctica has de crear un componente web que muestre el encabezado de cada cuestionario. Este componente web sustituir√° al actual bloque de HTML que contiene el t√≠tulo, la imagen y la descripci√≥n de cada cuestionario, de manera que en lugar de introducirlo con un c√≥digo similar a este (y con el correspondiente c√≥digo de JavaScript):

.. code-block:: html

  <section id="par√≠s">

  <h2><img src="..." alt="...">Cuestionario sobre Par√≠s</h2>
  <div class="wiki">...</div>

bastar√° con hacer:

.. code-block:: html

  <section id="par√≠s">

  <encabezado-cuestionario data-tema="Par√≠s"></encabezado-cuestionario>

Si repasas bien los contenidos sobre componentes web estudiados en clase, no te deber√≠a costar mucho implementar el componente web en un fichero ``encabezado-cuestionario.js``. Ve definiendo el componente sin eliminar hasta el final el c√≥digo que ya ten√≠as. Ten en cuenta los siguientes detalles:

- Los estilos de ``h2``, ``img`` y ``wiki`` se han de eliminar del CSS global y a√±adirlos al estilo del componente ``encabezado-cuestionario``.

- Gran parte del c√≥digo necesario para interactuar con los servicios web de Flickr y Wikipedia lo puedes tomar de las funciones ``addFlickr`` y ``addWikipedia`` que ya ten√≠as definidas, aunque los elementos que creaban estas funciones se a√±ad√≠an al DOM y ahora se a√±adir√°n al *shadow DOM*.

- Intenta, en principio, conseguir que algo como:

.. code-block:: html

  <encabezado-cuestionario data-tema="Berl√≠n"></encabezado-cuestionario>

funcione en ``index.html``. Cuando lo consigas, sustituye el encabezado de los cuestionarios iniciales existentes en ``index.html`` por el uso del elemento personalizado ``encabezado-cuestionario``. Ya no es necesario, tampoco, tener que a√±adir el texto de la Wikipedia o la imagen de Flickr a los cuestionarios preexistentes mediante c√≥digo expl√≠cito en JavaScript, sino que el nuevo elemento se encargar√° de ello.

- Repasa el tema de componentes web visto en clase antes de comenzar a escribir los componentes web. Pon el c√≥digo en JavaScript que se encarga de acceder a los servicios de Flickr y Wikipedia en la funci√≥n ``connectedCallback`` de la clase correspondiente y no en el constructor. Pon tambi√©n en ``connectedCallback`` el acceso al atributo ``data-tema``.

- Aseg√∫rate tambi√©n de que tu componente web se actualiza correctamente ante cambios din√°micos en el valor del atributo ``data-tema``.

- Ten en cuenta a qu√© apunta ``this`` en cada momento; tu c√≥digo del interior del m√©todo ``then`` asociado a una promesa ``fetch`` se ejecutar√° (cuando el servidor devuelva su respuesta) de forma as√≠ncrona fuera del contexto del componente web; en ese caso, ``this`` no estar√° apuntando al componente web, por lo que para acceder a sus propiedades tendr√°s que o bien usar funciones flecha o bien utilizar correctamente una clausura:


.. code-block:: javascript
  :linenos:
  :force:

  connectedCallback() {
    var componente= this;  // aqu√≠ this apunta al shadow host del componente web
    fetch(...)
    .then(...)
    .then(function () {
      componente.shadowRoot.querySelector(...).textContent= ...;
    })
    ...
  }


- Para terminar, puedes eliminar tambi√©n las antiguas ``addFlickr`` y ``addWikipedia`` del c√≥digo de JavaScript, as√≠ como sustituir su uso cuando se crean nuevos cuestionarios por c√≥digo que se encargue de la inserci√≥n oportuna del componente web.

Captura de pantalla
~~~~~~~~~~~~~~~~~~~

Observa `en una imagen`_ c√≥mo quedar√≠a la p√°gina web una vez a√±adidos dos cuestionarios y algunas preguntas. Ten en cuenta que el texto descriptivo o las im√°genes podr√≠an no corresponderse exactamente con las que los servicios web de Wikipedia o Flickr ofrezcan en el momento en que pruebes tu pr√°ctica; en la imagen, adem√°s, no se han eliminado los n√∫meros entre corchetes.

.. _`en una imagen`: _static/img/dai-p3-captura.png

Entrega de la pr√°ctica
~~~~~~~~~~~~~~~~~~~~~~

Aseg√∫rate de que tanto tus ficheros iniciales como cualquier estado posterior del DOM se validan correctamente con los validadores HTML5 y CSS del W3C con excepci√≥n de los elementos personalizados, que posiblemente generen alg√∫n tipo de error. Adem√°s, usa Chrome Developer Tools o Firebug para comprobar que el estilo aplicado en cada punto del documento es correcto y para depurar tu c√≥digo en JavaScript.

Nota: recuerda mantener un tu identificador de usuario en el pie del documento. Realiza tu entrega en un √∫nico fichero comprimido llamado ``p3-dai.zip`` a trav√©s del `servidor web del Departamento`. El archivo comprimido contendr√° directamente (sin ninguna carpeta contenedora) el fichero ``index.html``, una carpeta ``css`` con el fichero ``normal.css`` y una carpeta ``js`` con el c√≥digo en JavaScript.

Por √∫ltimo, coloca en alg√∫n punto del pie de la p√°gina un fragmento de HTML como ``<span id="tiempo">[10 horas]</span>`` donde has de sustituir el 10 por el n√∫mero de horas aproximadas que te haya llevado hacer esta pr√°ctica.



Pr√°ctica 4: una aplicaci√≥n en la nube üñ•Ô∏è
----------------------------------------

Esta pr√°ctica tiene dos partes. En la primera parte vas a ampliar la pr√°ctica anterior, que solo ten√≠a *front-end*, para a√±adirle un *back-end* que d√© persistencia a la aplicaci√≥n y permita gestionar una base de datos con la informaci√≥n de los cuestionarios. La aplicaci√≥n resultante se implantar√° en la plataforma Google App Engine y los datos se almacenar√°n en una base de datos MySQL alojada en el servicio Google Cloud SQL, de manera muy similar a la aplicaci√≥n del carrito que has estudiado en clase. Como en pr√°cticas anteriores, no puedes usar ninguna librer√≠a, como jQuery o Angular, en la parte del cliente, con excepci√≥n de la librer√≠a para integrar Google Sign-in que se usar√° en la segunda parte de la pr√°ctica.

La primera parte permitir√° obtener un 8 como nota m√°xima de la pr√°ctica. Los dos puntos restantes corresponden a la segunda parte, que no es obligatorio que implementes ni para la entrega de esta pr√°ctica ni para el examen de pr√°cticas, ya que el enunciado del examen supondr√° que no ha sido implementada. En la segunda parte de la pr√°ctica vas a permitir que el usuario se identifique mediante su cuenta de Google de forma que los cuestionarios tendr√°n un usuario asociado en la base de datos; los cuestionarios y preguntas de un usuario no podr√°n ser vistos por el resto de usuarios.

Cuando el usuario entre en la aplicaci√≥n, se le mostrar√° el formulario para insertar nuevos cuestionarios; inicialmente no habr√° ning√∫n cuestionario creado y, por tanto, ya no aparecer√°n los cuestionarios de Par√≠s ni Londres. La aplicaci√≥n funcionar√° como una *aplicaci√≥n de una √∫nica p√°gina* (en ingl√©s, *SPA* por *single-page application*): cada vez que el usuario introduzca o elimine datos, los cuestionarios se actualizar√°n convenientemente en la p√°gina como hasta ahora, pero tambi√©n lo har√°n en la base de datos del servidor.

Como en el ejemplo del carrito visto en clase, el c√≥digo del servidor estar√° escrito con Node.js y Express, y funcionar√° con una base de datos SQLite mientras se ejecute localmente y con MySQL cuando se ejecute desde Google App Engine. Al usar Knex.js, la mayor parte del c√≥digo para ambas opciones ser√° el mismo, como vimos en la aplicaci√≥n del carrito. Asimismo, la aplicaci√≥n ser√° la encargada de crear el esquema de la base de datos si las tablas no existen.


Comprobaci√≥n de la aplicaci√≥n del carrito
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Comienza asegur√°ndote de que entiendes c√≥mo funciona la apicaci√≥n del carrito vista en clase y que eres capaz de ejecutarla localmente en ``localhost`` y en la nube de Google App Engine. Recuerda que las instrucciones sobre c√≥mo configurar el entorno de trabajo y lanzar la aplicaci√≥n tanto en modo local como en la nube se dieron en las secciones ":ref:`label-local`", ":ref:`label-gcloud`" y ":ref:`label-appengine`".

.. Important::

  Recuerda que en Linux puedes instalar todo el software necesario r√°pidamente con ayuda del fichero `dai-bundle-dev`_: desc√°rgalo, descompr√≠melo, edita y luego ejecuta el script ``install.sh``. 
  
  .. Recuerda lo que se comenta al principio del apartado ":ref:`label-local`" sobre el hecho de que el sistema operativo *oficial* de la asignatura es Linux. El examen de pr√°cticas se realizar√° sobre la versi√≥n de Linux instalada en los ordenadores de los laboratorios, por lo que es muy importante que aprendas a trabajar sobre ellos. Mientras trabajas en la pr√°ctica, en los ordenadores de los laboratorios solo necesitas instalar Node.js y el SDK de Google Cloud Platform (SQLite3 ya est√° instalado). El d√≠a del examen solo necesitas instalar Node.js, ya que no se pedir√° en el examen que implantes nada en la nube.
  
  .. _`dai-bundle-dev`: https://www.dlsi.ua.es/~japerez/cursos/dai/dai-bundle-dev-20231111.tar.gz


Incorporaci√≥n e implantaci√≥n de la aplicaci√≥n de la pr√°ctica anterior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A√±ade ahora en la carpeta adecuada de la aplicaci√≥n del carrito, los ficheros de tu pr√°ctica 3 de forma que *index.html* est√© alojado donde corresponda y el resto de elementos de tu aplicaci√≥n mantengan su estructura relativa. Lanza la aplicaci√≥n en modo local y comprueba que funciona correctamente. A continuaci√≥n, implanta tu aplicaci√≥n en la nube de Google App Engine y comprueba que, de nuevo, sigue funcionando correctamente. 

.. Note::

  El √∫nico cambio que quiz√°s tengas que hacer para que tu aplicaci√≥n funcione en la nube de Google vendr√≠a dado porque a la hora de indicar los tipos de letra de Google Fonts o las direcciones de acceso a las APIs de Wikipedia o Flickr hubieras usado el protocolo *http* en lugar de *https*; en ese caso, tendr√≠as que cambiarlo ahora ya que a las aplicaciones de Google App Engine se accede mediante *https* y desde una p√°gina descargada de forma segura no es posible referenciar recursos con URLs no seguras.

Como la p√°gina ya no contiene inicialmente ning√∫n cuestionario, puedes borrar de la funci√≥n *init* el c√≥digo que se encargaba de a√±adir a cada uno de los cuestionarios existentes la cruz de borrado y el formulario de inserci√≥n de preguntas.

Caracter√≠sticas comunes de los servicios web a implementar
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Los servicios web a implementar ser√°n de tipo GET, POST o DELETE seg√∫n su cometido y recibir√°n la informaci√≥n y la devolver√°n en formato JSON. La respuesta del servidor siempre seguir√° el siguiente formato::

  {"result":...,"error":...}

Cuando la petici√≥n se haya podido atender correctamente, el atributo ``result`` contendr√° la informaci√≥n relevante que haya que devolver al cliente y el atributo ``error`` valdr√° ``null``; el c√≥digo de estado HTTP devuelto en este caso ser√° 200. Por otro lado, si alg√∫n problema impide en tu c√≥digo atender correctamente la solicitud (por ejemplo, se intenta eliminar un cuestionario inexistente), la respuesta del servidor contendr√° la informaci√≥n adecuada en el atributo ``error`` y el atributo ``result`` valdr√† ``null``; el c√≥digo de estado devuelto en este caso ser√° 404. Una situaci√≥n t√≠pica de error que has de controlar es que los par√°metros esperados de cada servicio web sean incorrectos o no existan.

Cada vez que en el c√≥digo de JavaScript realices una petici√≥n Fetch a uno de los servicios del *back-end*, tendr√°s que comprobar si el JSON devuelto contiene un valor distinto de ``null`` en la propiedad ``error``; en ese caso, la aplicaci√≥n mostrar√° una ventana de alerta (funci√≥n ``alert``) con un error informativo seguido del contenido de ``error``; adem√°s, todas tus peticiones Fetch definir√°n una funci√≥n que muestre una ventana de alerta similar ante el resto de posibles situaciones de error (por ejemplo, no se puede establecer la conexi√≥n con el servidor).

Ninguna de las acciones que se tengan que efectuar sobre la p√°gina actual del navegador como consecuencia de una acci√≥n de inserci√≥n o borrado por parte del usuario se llevar√°n a cabo si el servidor devuelve un error (por ejemplo, no se a√±adir√° un cuestionario a la p√°gina actual si el servidor no informa de que lo ha a√±adido con √©xito a la base de datos). Ante estas situaciones de error, como ya se ha comentado, habr√°, adem√°s, que mostrar una ventana de alerta.

Almacenamiento de los cuestionarios
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

En esta pr√°ctica crear√°s servicios web siguiendo el patr√≥n REST para lo siguiente:

- a√±adir un tema de cuestionario (POST) y devolver el id asignado en la base de datos;
- recuperar todos los temas (GET); 
- borrar un tema a partir de su id y todas sus preguntas (DELETE);
- a√±adir una pregunta y su correspondiente respuesta a un cuestionario dado el id del tema (POST) y devolver el id de la pregunta en la base de datos;
- obtener todas las preguntas y respuestas dado el id del tema (GET);
- borrar una pregunta dado su id (DELETE).

Usa URLs con patrones similares a los de la aplicaci√≥n del carrito del tema de servicios web.

Representaci√≥n de los datos en la base de datos
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

La base de datos contendr√° una tabla para representar los cuestionarios y otra para representar las preguntas. Cada cuestionario vendr√° representado por un identificador √∫nico generado autom√°ticamente (clave primaria) y su tema. Cada pregunta vendr√° representada por un identificador √∫nico (clave primaria), el identificador de su tema (clave ajena), el texto de la pregunta y su respuesta correcta.

Con√©ctate tanto a la base de datos SQLite (cuando pruebes la aplicaci√≥n en local) como a MySQL (en Google App Engine) para comprobar que las tablas se est√°n rellenando o actualizando correctamente tras cada llamada a un servicio web.

Crea atributos nuevos en el c√≥digo HTML generado (recuerda que han de comenzar por el prefijo ``data-``) para guardar para cada cuestionario y pregunta sus identificadores en la base de datos; de esta manera, resultar√° sencillo poder indicarle al servidor que, por ejemplo, borre un determinado cuestionario o una determinada pregunta. 

Gesti√≥n de los temas de los cuestionarios
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Comienza creando un servicio web que a√±ada un nuevo tema a la base de datos. Como ya se ha comentado, el cuestionario solo se a√±ade a la p√°gina actual si la respuesta del servicio es positiva; en otro caso, la solicitud del usuario de crear un nuevo cuestionario no tiene efecto sobre la p√°gina del navegador. Este servicio no permite tener m√°s de un cuestionario con el mismo tema. Si, por ejemplo, ya existiera un cuestionario sobre Lugano en la base de datos, la respuesta ser√≠a (tu mensaje de error no ha de coincidir necesariamente)::

  { "result":null,"error":"el tema Lugano ya existe en la base de datos"}

A continuaci√≥n, crea un servicio web que elimine de la base de datos un tema. Despu√©s, modifica el c√≥digo JavaScript del cliente para que invoque este servicio cuando proceda borrar un cuestionario. El cuestionario solo se elimina de la p√°gina actual si la respuesta del servicio es positiva. A diferencia de pr√°cticas anteriores, por tanto, en esta es posible que al borrar la √∫ltima pregunta de un cuestionario, este no desaparezca; esto puede ocurrir ya que la pregunta se borra en primer lugar y, una vez borrada, se ha de proceder a intentar borrar el cuestionario que la inclu√≠a; si este √∫ltimo borrado falla, la pregunta eliminada no se recupera. El servicio devolver√° en la respuesta en JSON un error si el identificador del tema indicado en los datos de la petici√≥n no existe en la base de datos.

Ahora crea un servicio que liste los temas disponibles en la base de datos. A√±ade el c√≥digo necesario para invocar el nuevo servicio desde la funci√≥n *init* de forma que se muestren los encabezados (y los formularios de inserci√≥n de preguntas) de los cuestionarios almacenados en la base de datos al cargar la aplicaci√≥n. Observa que gran parte del c√≥digo para lo anterior ya existe en la funci√≥n *addCuestionario*, por lo que te puede interesar refactorizar y crear una nueva funci√≥n con el c√≥digo com√∫n. Asimismo, observa, que el identificador (*c1*, *c2*, etc.) asignado inicialmente a un cuestionario no tiene por qu√© mantenerse en la nueva aplicaci√≥n.

En estos momentos, tu aplicaci√≥n ha de permitir crear nuevos formularios y a√±adirles preguntas. Los temas de los formularios se almacenan ya correctamente en la base de datos, por lo que, aunque se cierre la ventana de la aplicaci√≥n, esta informaci√≥n se vuelve a mostrar al abrirla de nuevo. Las preguntas, sin embargo, se pierden si se recarga la aplicaci√≥n; en el apartado siguiente vas a solucionarlo.

Gesti√≥n de las preguntas de los cuestionarios
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

De forma an√°loga a como has hecho con los cuestionarios, vas a crear tres servicios web que permitan a√±adir, borrar y listar las preguntas asociadas a un cuestionario. Al igual que con los cuestionarios, no ser√° posible a√±adir a la base de datos dos preguntas con el mismo enunciado para un tema concreto. Los posibles errores a detectar y las respuestas de los servicios son an√°logas a las del caso de los cuestionarios

Comprueba que tu aplicaci√≥n permite crear y eliminar tanto cuestionarios como preguntas y que los datos persisten correctamente aun cuando se recarga la aplicaci√≥n.

Autenticaci√≥n de usuarios
~~~~~~~~~~~~~~~~~~~~~~~~~

En la segunda parte de la pr√°ctica (opcional, como se ha comentado m√°s arriba), vas a permitir que los usuarios se identifiquen en la aplicaci√≥n con su cuenta de Google usando la API de Google Sign-in como en el ejemplo de c√≥digo explorado en la actividad :ref:`label-signin`. A√±ade los botones para identificarse y para salir de la aplicaci√≥n como en dicho c√≥digo. Mientras no haya un usuario logueado, la aplicaci√≥n funcionar√° como hasta ahora; de esta forma seguir√° funcionando en modo local incluso si no hay conexi√≥n a internet (por ejemplo, durante el examen). Cuando un usuario se identifique, los cuestionarios y preguntas que no le pertenecen se borrar√°n de la p√°gina web (pero no de la base de datos) y se cargar√°n los cuestionarios y preguntas que el usuario pudiera haber creado en una sesi√≥n anterior. Igualmente, cuando el usuario abandone la aplicaci√≥n, sus cuestionarios y preguntas se borrar√°n de la p√°gina web (pero no de la base de datos) y se cargar√°n los cuestionarios y preguntas no vinculados a un usuario concreto. 

Aseg√∫rate de que el sistema de autenticaci√≥n de usuarios tambi√©n funciona cuando la aplicaci√≥n se despliega en Google App Engine.

Entrega de la pr√°ctica
~~~~~~~~~~~~~~~~~~~~~~

Aseg√∫rate de que tanto tus ficheros iniciales como cualquier estado posterior del DOM se validan correctamente con los validadores HTML5 y CSS del W3C con excepci√≥n de los elementos personalizados, que posiblemente generen alg√∫n tipo de error. Adem√°s, usa Chrome Developer Tools o Firebug para comprobar que el estilo aplicado en cada punto del documento es correcto y para depurar tu c√≥digo en JavaScript del lado del cliente; usa Visual Studio Code para depurar el c√≥digo de Node.js de la parte del servidor.

*Nota:* recuerda mantener tu identificador de usuario en el pie del documento. Realiza tu entrega en un √∫nico fichero comprimido llamado ``p4-dai.zip`` a trav√©s del `servidor web del Departamento`_. El archivo comprimido contendr√° directamente (sin ninguna carpeta contenedora) el fichero ``app.js``, los otros ficheros del servidor y las carpetas que sean necesarias. Aseg√∫rate de borrar la carpeta ``node_modules`` antes de crear el *zip* para que su contenido no se incluya en el fichero generado y evitar as√≠ que la pr√°ctica que entregues tenga m√°s tama√±o del necesario.

Sube tu aplicaci√≥n a Google App Engine e incluye en el pie de p√°gina de tu aplicaci√≥n un enlace al URL correspondiente en ``appspot.com``. Tu pr√°ctica ser√° corregida descomprimiendo el fichero *zip*, haciendo::

  npm install
  npm start

y accediendo al URL correspondiente en ``localhost``. Tambi√©n se evaluar√° usando el enlace a la aplicaci√≥n en Google App Engine suministrado a pie de p√°gina, despertando previamente si procede la instancia de la base de datos de Google Cloud SQL. 

Por √∫ltimo, coloca en alg√∫n punto del pie de la p√°gina un fragmento de HTML como ``<span id="tiempo">[10 horas]</span>`` donde has de sustituir el 10 por el n√∫mero de horas aproximadas que te haya llevado hacer esta pr√°ctica.



.. _label-ampliaciones:

AP√âNDICE: Ejemplos de posibles ejercicios para el examen pr√°ctico
-----------------------------------------------------------------

Este apartado muestra algunos ejemplos de posibles ejercicios para el examen pr√°ctico. Un examen t√≠pico incluir√≠a solo uno de ellos, pero ser√≠a posible tambi√©n que hubiera dos o m√°s ejercicios de menor complejidad. El tiempo de realizaci√≥n del examen suele estar en torno a los 110 minutos. No podr√°s hacer estos ejercicios hasta que hayas acabado la pr√°ctica 4, ya que se basan en ella. Ejercicios adicionales con los que podr√≠as practicar son:

- permitir hacer un cuestionario *p√∫blico* de forma que pueda consultarse a trav√©s de una URL propia;
- permitir que un cuestionario pueda borrarse sin necesidad de borrar anteriormente todas sus preguntas;
- permitir que los cuestionarios o las preguntas puedan moverse *arriba o abajo* en la ventana de la aplicaci√≥n para ponerlos en un orden concreto;
- permitir que las preguntas puedan editarse;
- permitir que la aplicaci√≥n use otros servicios web de terceros; posiblemente se te ocurran ideas cuando repases esta `lista de APIs p√∫blicas`_;
- cualquier otra modificaci√≥n de complejidad similar que se te pueda ocurrir; insp√≠rate para ello en las aplicaciones web que usas, especialmente en aquellas que se basan en gestionar *listas de listas*.

.. _`lista de APIs p√∫blicas`: https://github.com/toddmotto/public-apis

Colapsar los enunciados de las preguntas
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Modifica tu pr√°ctica 4 para que junto al t√≠tulo de cada cuestionario aparezca un elemento (un bot√≥n, por ejemplo) que permita colapsar o expandir la lista de preguntas asociadas a dicho cuestionario. Mientras la lista de preguntas est√© colapsada, las preguntas no se mostrar√°n en pantalla, ni siquiera cuando se a√±ada una nueva pregunta al cuestionario correspondiente. Cuando la lista de preguntas est√© expandida, el comportamiento de la aplicaci√≥n ser√° similar al actual.

El estado colapsado/expandido de un cuestionario se almacenar√° en la base de datos y se mantendr√° aunque la aplicaci√≥n se recargue. Al crear un nuevo cuestionario, este estar√° por defecto expandido.

Para obtener la m√°xima nota ser√° necesario, adem√°s, que cuando el cuestionario est√© colapsado se indique el n√∫mero de preguntas ocultas existentes.

Lo siguiente son algunos consejos relativos a la implementaci√≥n que no es obligatorio que sigas. √önicamente se dan a modo de recomendaci√≥n y pueden estar m√°s o menos incompletos seg√∫n como sea tu implementaci√≥n.

- Cada entrada de la tabla de cuestionarios de la base de datos tendr√° un nuevo atributo (llamado, por ejemplo,  ``colapsado``) que almacenar√° su estado de colapso.
- Comienza implementando dos servicios web: uno que devuelva en formato JSON el estado de colapso de un determinado cuestionario (referenciado mediante su id) y otro para cambiarlo.
- Para crear los servicios web anteriores, te puedes inspirar en los servicios que ya has implementado para listar cuestionarios o preguntas.
- Para modificar una entrada de la base de datos con Knex.js puedes usar un c√≥digo como el siguiente que equivale a la instrucci√≥n SQL indicada en el comentario:

.. code-block:: javascript
  :linenos:

  knex('books')
  .where('published_date', '=', 2000)
  .update({
    status: 'archived'
  });

  // SQL: update `books` set `status` = 'archived' where `published_date` < 2000

- Una posible manera de gestionar f√°cilmente el estado de expandido/colapsado de las preguntas de un cuestionario en el navegador es a√±adiendo un atributo ``data-colapsado`` (con valores ``true`` o ``false``) al elemento ``section`` que rodea el cuestionario. Con algunas reglas de estilo sencillas basadas en la propiedad ``display`` de CSS podr√°s hacer que las preguntas de cada cuestionario se muestren o no en la aplicaci√≥n seg√∫n el valor de ``data-colapsado``.
- Modifica tu c√≥digo en JavaScript para que el atributo ``data-colapsado`` se a√±ada con el valor adecuado tanto al crear un nuevo cuestionario como al recuperar la lista de cuestionarios del servidor. Para este segundo caso, tendr√°s que llamar al servicio que devuelve la informaci√≥n de colapso con cada tema de cuestionario. Recuerda c√≥mo funcionan las clausuras en JavaScript si para lo anterior usaras un bucle que iterara sobre todos los temas y llamara con *fetch* al servicio web con cada uno de ellos; es posible en ese caso que te interese definir una variable con ``let`` (y no con ``var``) para obtener el nodo ``section`` al que a√±adir el atributo:


.. code-block:: javascript
  :linenos:

  for (...) {  /* itera sobre los temas */
    ...
    let node = /* nodo section del cuestionario correspondiente */
    ...
    fetch("...info-colapsado...")
    ...
    .then(
    ...
      node.setAttribute("data-colapsado",...); /* clausura */
    ...
    )
  }

- A√±ade un bot√≥n o simplemente texto al inicio de cada cuestionario que permita cambiar el estado de colapsado/expandido. As√≥ciale un nuevo manejador de evento y escribe su c√≥digo inspir√°ndote, por ejemplo, en el de la funci√≥n ya existente que borra un cuestionario. Llama adecuadamente con *fetch* al servicio de cambio de estado de colapso desde la funci√≥n del nuevo manejador de evento.


Destacar algunas preguntas de un cuestionario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Modifica tu pr√°ctica 4 para que cada pregunta incluya un nuevo icono (por ejemplo, la estrella ‚òÖ con c√≥digo Unicode U+2605 o un simple asterisco) junto al icono de borrado que permita *destacar* dicha pregunta. Una pregunta destacada se muestra la primera en la lista de preguntas de un cuestionario dado. Solo se puede destacar una pregunta como m√°ximo en cada cuestionario. Cada clic sobre el icono de destacar activa o desactiva el estado de la pregunta. El color del icono ha de cambiar cuando la pregunta est√© destacada. El estado de destacada de una pregunta se almacenar√° en la base de datos y se mantendr√° aunque la aplicaci√≥n se recargue. Al crear un nueva pregunta, esta estar√° por defecto no destacada.

Cuando se cambia el estado de una pregunta destacada, esta no tiene que volver a su posici√≥n original en la lista de preguntas salvo, quiz√°s, si se recarga la p√°gina. Adem√°s, no tienes que cambiar el siguiente comportamiento, que probablemente ser√° el que tenga tu aplicaci√≥n: al subir una pregunta al principio de la lista, esta pasar√° a ser la pregunta 1 y las siguientes se renumerar√°n en consonancia.

Lo siguiente son algunos consejos relativos a la implementaci√≥n que no es obligatorio que sigas. √önicamente se dan a modo de recomendaci√≥n y pueden estar m√°s o menos incompletos seg√∫n como sea tu implementaci√≥n.

- Cada entrada de tipo pregunta de la base de datos tendr√° una nueva propiedad (llamada, por ejemplo, ``destacada``) que almacenar√° su estado de destacada.
- Comienza a√±adiendo el nuevo icono al bloque en la misma funci√≥n de tu c√≥digo en Javascript en la que a√±ades la cruz de borrado.
- En el DOM del documento representa el estado de una pregunta mediante un atributo ``data-destacada`` en el elemento del bloque correspondiente:

.. code-block:: html
  :linenos:
			
  <div class="bloque" data-destacada="true">
    ...
  </div>

- Aseg√∫rate de que en la parte de tu c√≥digo JavaScript encargada de crear una nueva pregunta se inicializa a falso el atributo ``data-destacada``.
- A√±ade un manejador de evento para cuando se haga clic sobre el nuevo icono. Este manejador cambia el valor del atributo ``data-destacada``.
- Para ahorrarte algunas conversiones, haz que cualquier nueva variable en tu c√≥digo JavaScript que represente el estado de una pregunta sea de tipo cadena y no booleana.
- Modifica la hoja de estilo para que el nuevo icono se muestre junto a la cruz de borrado. A√±ade los estilos necesarios para que se muestre en rojo si la pregunta est√° destacada y en negro en otro caso.
- Modifica el manejador del evento del nuevo icono para que solo cambie el valor de ``data-destacada`` si no hay otra pregunta destacada en el cuestionario; si la hay, ha de mostrar una ventana de *alerta* y no hacer nada m√°s.
- Crea un nuevo servicio web para cambiar el valor de la propiedad ``destacada`` de una pregunta en la base de datos. Es posible que te interese basarte en el codigo ya existente de alg√∫n otro servicio web.
- Para modificar una entrada de la base de datos con Knex.js puedes usar un c√≥digo como el siguiente que equivale a la instrucci√≥n SQL indicada en el comentario:

.. code-block:: javascript
  :linenos:

  knex('books')
  .where('published_date', '=', 2000)
  .update({
    status: 'archived'
  });

  // SQL: update `books` set `status` = 'archived' where `published_date` < 2000

- Cambia tambi√©n el servicio web que se invoca al crear una nueva pregunta para que la propiedad ``destacada`` se inicialice adecuadamente.
- En el c√≥digo del cliente, cuando el servidor no d√© error al cambiar el estado de una pregunta, mueve la pregunta al inicio de la lista de preguntas del cuestionario; es posible que te venga bien usar la funci√≥n ``insertBeforeChild`` para ello.
- Haz que al recargar la p√°gina y leer todas las preguntas de un cuestionario, la pregunta destacada se coloque al principio. Modifica los servicios web oportunos para que devuelvan en los datos en JSON la nueva propiedad. Modifica el c√≥digo de la funci√≥n ``init`` de JavaScript para que al leer las preguntas de cada cuestionario coloque al comienzo la pregunta destacada, si la hay.
